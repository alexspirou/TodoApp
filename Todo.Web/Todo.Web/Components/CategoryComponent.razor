@using Todo.Shared.Responses
@using Todo.Web.Common;
@using Todo.Web.Services;
@using Todo.Web.Services.Interfaces

@namespace Todo.Web.Components


@inject ITodoMangerService TodoEntriesService
@inject AppState AppState


<div class="todo-task-container">
    <div class="todo-task-header">

        <div class="upper-section">
            <div class="upper-section-left">
                <p>@Category.Name</p>
            </div>
            <div class="upper-section-right">
                <img class="image-delete" @onclick="async () =>await DeleteCategoryAsync(Category)">
            </div>
        </div>
        <div class="lower-section">
            <p class="created-date"><i>Created: @Category.Date.ToShortDateString()</i></p>
        </div>

    </div>

    @if (_todoTasks != null && _todoTasks.Any())
    {
        @foreach (var todoTask in _todoTasks)
        {
            <div class="todo-body @(IsRowExpandedDict.ContainsKey(todoTask.Id) &&IsRowExpandedDict[todoTask.Id] ? "expanded" : "")">
                <div class="todo-task-row">
                    <div class="checkbox-container">
                        <img src="" class="image-circle @(todoTask.IsDone ? "done" : "")" for="opt-in" @onclick="async () =>await UpdateStatusAsync(todoTask)">
                    </div>
                    <div class="task-title-container">
                        <label class="todo-label @(todoTask.IsDone ? "done" : "")">@todoTask.Title</label>
                    </div>
                    <div class="show-comments-container">
                        <img class="image-arrow @(IsRowExpandedDict.ContainsKey(todoTask.Id) &&IsRowExpandedDict[todoTask.Id] ? "up" : "")" @onclick=" () => OnArrowDownIsClickedAsync(todoTask)">
                    </div>
                    <div class="delete-container">
                        <img class="image-delete" @onclick="async () =>await DeleteTodoTaskAsync(todoTask)">
                    </div>
                </div>

                @if (IsRowExpandedDict.ContainsKey(todoTask.Id) && IsRowExpandedDict[todoTask.Id])
                {
                    <CommentComponent Comments="todoTask.Comments" TodoTaskId="todoTask.Id" />
                }
            </div>

        }
    }
    else
    {
        <p>No items available.</p>
    }
    <div class="add-new-task-form">
        <form>
            <input type="text"
                   class="new-item"
                   @bind="_newTaskName"
                   placeholder="Add new task" />
            <input type="text"
                   class="new-item"
                   @bind="_newTaskComment"
                   placeholder="Add comment" />
            <div>
                <button class="button-item" @onclick="() =>AddNewTaskAsync(Category.Id, _newTaskName ,_newTaskComment)">+</button>
            </div>
        </form>
    </div>
</div>
